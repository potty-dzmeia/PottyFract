package my.potty.fract;

import my.potty.fract.FractalSettings.ColorMode;
import android.graphics.Color;

/** Class used for substituting number of iterations to respective color
 * 
 * @author Pottry
 *
 */
public class ColorCreator 
{
    private int[] bitmapBuffer; // 
	
	/**
	 *  Transforms an array holding number of iterations to array with color values
	 * 
	 * @param inputBuffer 		- Input array where values signifies number of iterations
	 * @param maxIterations 	- Max possible number of iterations (Highest possible value for the input array)
	 * @param colorType			- What type of coloration we will use for our array
	 * @param iNumberOfCycles  	- If color option that is chosen is periodic, this value will
	 * 							  specify how many times we want the color to be cycled.
	 * @return - array with colors. Each color corresponds to number of iterations
	 */

	public  int[] getColorArray(int[] 	  inputBuffer, 
    						    int       maxIterations, 
    							ColorMode colorType,
    							int 	  iNumberOfCycles)
	{
        int   iTemp; // Temporary variable used for calculations later in the code
        
	    if(bitmapBuffer == null)
	        bitmapBuffer = new int[inputBuffer.length];
		
	    if(inputBuffer.length != bitmapBuffer.length)
	        bitmapBuffer = new int[inputBuffer.length];
		
		
		
		// The values in the inputBuffer buffer will be represented by color palette. 
		if(colorType == ColorMode.COLOR)
		{
			// Draw each point of the array with the appropriate color
			for(int i=0; i<inputBuffer.length; i++)
			{
				// If the point was not calculated or equals max iterations, draw it black
				if(inputBuffer[i] < 0 || inputBuffer[i] == maxIterations)
					bitmapBuffer[i] = Color.BLACK;
				// Else substitute value with color
				else
				{	// Scale each value from the buffer to [0:iNumberOfCycles*colorPallette.length]
					// Then get the corresponding color from the palette using modulo
					iTemp =((colorPallette.length-1)*inputBuffer[i]*iNumberOfCycles)/maxIterations;			
					bitmapBuffer[i] = colorPallette[iTemp%(colorPallette.length-1)];
				}
			}	
			
		}
		// The values in the inputBuffer buffer will be represented by color palette
		else if(colorType == ColorMode.COLOR_INVERTED)
		{
			// Draw each point of the array with the appropriate color
			for(int i=0; i<inputBuffer.length; i++)
			{
				// If the point was not calculated or equals max iterations, draw it black
				if(inputBuffer[i] < 0 || inputBuffer[i] == maxIterations)
					bitmapBuffer[i] = Color.BLACK;
				// Else substitute value with color
				else
				{
					// Big values are white and small are black
					iTemp =((colorPallette.length-1)*iNumberOfCycles - ((colorPallette.length-1)*inputBuffer[i]*iNumberOfCycles)/maxIterations);
					bitmapBuffer[i] = colorPallette[iTemp%(colorPallette.length-1)];
				}
			}	
			
		}
		// The values in the inputBuffer buffer will be represented by B&W palette
		else if(colorType == ColorMode.BW)
		{
			// Draw each point of the array with the appropriate color
			for(int i=0; i<inputBuffer.length; i++)
			{
				// If the point was not calculated or equals max iterations, draw it black
				if(inputBuffer[i] < 0 || inputBuffer[i] == maxIterations)
					bitmapBuffer[i] = Color.BLACK;
				// Else substitute value with color
				else
				{
					// Big values are white and small are black
					iTemp = ((BWPallette.length-1)*inputBuffer[i]*iNumberOfCycles)/maxIterations;
					bitmapBuffer[i] = BWPallette[iTemp%(BWPallette.length-1)]|0xFF000000;
				}
			}	
			
		}
		return bitmapBuffer;
	}
	

	static private final int[] BWPallette = 
	{
		65793,
		131586,
		197379,
		263172,
		328965,
		394758,
		460551,
		526344,
		592137,
		657930,
		723723,
		789516,
		855309,
		921102,
		986895,
		1052688,
		1118481,
		1184274,
		1250067,
		1315860,
		1381653,
		1447446,
		1513239,
		1579032,
		1644825,
		1710618,
		1776411,
		1842204,
		1907997,
		1973790,
		2039583,
		2105376,
		2171169,
		2236962,
		2302755,
		2368548,
		2434341,
		2500134,
		2565927,
		2631720,
		2697513,
		2763306,
		2829099,
		2894892,
		2960685,
		3026478,
		3092271,
		3158064,
		3223857,
		3289650,
		3355443,
		3421236,
		3487029,
		3552822,
		3618615,
		3684408,
		3750201,
		3815994,
		3881787,
		3947580,
		4013373,
		4079166,
		4144959,
		4210752,
		4276545,
		4342338,
		4408131,
		4473924,
		4539717,
		4605510,
		4671303,
		4737096,
		4802889,
		4868682,
		4934475,
		5000268,
		5066061,
		5131854,
		5197647,
		5263440,
		5329233,
		5395026,
		5460819,
		5526612,
		5592405,
		5658198,
		5723991,
		5789784,
		5855577,
		5921370,
		5987163,
		6052956,
		6118749,
		6184542,
		6250335,
		6316128,
		6381921,
		6447714,
		6513507,
		6579300,
		6645093,
		6710886,
		6776679,
		6842472,
		6908265,
		6974058,
		7039851,
		7105644,
		7171437,
		7237230,
		7303023,
		7368816,
		7434609,
		7500402,
		7566195,
		7631988,
		7697781,
		7763574,
		7829367,
		7895160,
		7960953,
		8026746,
		8092539,
		8158332,
		8224125,
		8289918,
		8355711,
		8421504,
		8487297,
		8553090,
		8618883,
		8684676,
		8750469,
		8816262,
		8882055,
		8947848,
		9013641,
		9079434,
		9145227,
		9211020,
		9276813,
		9342606,
		9408399,
		9474192,
		9539985,
		9605778,
		9671571,
		9737364,
		9803157,
		9868950,
		9934743,
		10000536,
		10066329,
		10132122,
		10197915,
		10263708,
		10329501,
		10395294,
		10461087,
		10526880,
		10592673,
		10658466,
		10724259,
		10790052,
		10855845,
		10921638,
		10987431,
		11053224,
		11119017,
		11184810,
		11250603,
		11316396,
		11382189,
		11447982,
		11513775,
		11579568,
		11645361,
		11711154,
		11776947,
		11842740,
		11908533,
		11974326,
		12040119,
		12105912,
		12171705,
		12237498,
		12303291,
		12369084,
		12434877,
		12500670,
		12566463,
		12632256,
		12698049,
		12763842,
		12829635,
		12895428,
		12961221,
		13027014,
		13092807,
		13158600,
		13224393,
		13290186,
		13355979,
		13421772,
		13487565,
		13553358,
		13619151,
		13684944,
		13750737,
		13816530,
		13882323,
		13948116,
		14013909,
		14079702,
		14145495,
		14211288,
		14277081,
		14342874,
		14408667,
		14474460,
		14540253,
		14606046,
		14671839,
		14737632,
		14803425,
		14869218,
		14935011,
		15000804,
		15066597,
		15132390,
		15198183,
		15263976,
		15329769,
		15395562,
		15461355,
		15527148,
		15592941,
		15658734,
		15724527,
		15790320,
		15856113,
		15921906,
		15987699,
		16053492,
		16119285,
		16185078,
		16250871,
		16316664,
		16382457,
		16448250,
		16514043,
		16579836,
		16645629,
		16711422,
		16777215,
 		16777215, 
 		16711422, 
 		16645629, 
 		16579836, 
 		16514043, 
 		16448250, 
 		16382457, 
 		16316664, 
 		16250871, 
 		16185078, 
 		16119285, 
 		16053492, 
 		15987699, 
 		15921906, 
 		15856113, 
 		15790320, 
 		15724527, 
 		15658734, 
 		15592941, 
 		15527148, 
 		15461355, 
 		15395562, 
 		15329769, 
 		15263976, 
 		15198183, 
 		15132390, 
 		15066597, 
 		15000804, 
 		14935011, 
 		14869218, 
 		14803425, 
 		14737632, 
 		14671839, 
 		14606046, 
 		14540253, 
 		14474460, 
 		14408667, 
 		14342874, 
 		14277081, 
 		14211288, 
 		14145495, 
 		14079702, 
 		14013909, 
 		13948116, 
 		13882323, 
 		13816530, 
 		13750737, 
 		13684944, 
 		13619151, 
 		13553358, 
 		13487565, 
 		13421772, 
 		13355979, 
 		13290186, 
 		13224393, 
 		13158600, 
 		13092807, 
 		13027014, 
 		12961221, 
 		12895428, 
 		12829635, 
 		12763842, 
 		12698049, 
 		12632256, 
 		12566463, 
 		12500670, 
 		12434877, 
 		12369084, 
 		12303291, 
 		12237498, 
 		12171705, 
 		12105912, 
 		12040119, 
 		11974326, 
 		11908533, 
 		11842740, 
 		11776947, 
 		11711154, 
 		11645361, 
 		11579568, 
 		11513775, 
 		11447982, 
 		11382189, 
 		11316396, 
 		11250603, 
 		11184810, 
 		11119017, 
 		11053224, 
 		10987431, 
 		10921638, 
 		10855845, 
 		10790052, 
 		10724259, 
 		10658466, 
 		10592673, 
 		10526880, 
 		10461087, 
 		10395294, 
 		10329501, 
 		10263708, 
 		10197915, 
 		10132122, 
 		10066329, 
 		10000536, 
 		9934743, 
 		9868950, 
 		9803157, 
 		9737364, 
 		9671571, 
 		9605778, 
 		9539985, 
 		9474192, 
 		9408399, 
 		9342606, 
 		9276813, 
 		9211020, 
 		9145227, 
 		9079434, 
 		9013641, 
 		8947848, 
 		8882055, 
 		8816262, 
 		8750469, 
 		8684676, 
 		8618883, 
 		8553090, 
 		8487297, 
 		8421504, 
 		8355711, 
 		8289918, 
 		8224125, 
 		8158332, 
 		8092539, 
 		8026746, 
 		7960953, 
 		7895160, 
 		7829367, 
 		7763574, 
 		7697781, 
 		7631988, 
 		7566195, 
 		7500402, 
 		7434609, 
 		7368816, 
 		7303023, 
 		7237230, 
 		7171437, 
 		7105644, 
 		7039851, 
 		6974058, 
 		6908265, 
 		6842472, 
 		6776679, 
 		6710886, 
 		6645093, 
 		6579300, 
 		6513507, 
 		6447714, 
 		6381921, 
 		6316128, 
 		6250335, 
 		6184542, 
 		6118749, 
 		6052956, 
 		5987163, 
 		5921370, 
 		5855577, 
 		5789784, 
 		5723991, 
 		5658198, 
 		5592405, 
 		5526612, 
 		5460819, 
 		5395026, 
 		5329233, 
 		5263440, 
 		5197647, 
 		5131854, 
 		5066061, 
 		5000268, 
 		4934475, 
 		4868682, 
 		4802889, 
 		4737096, 
 		4671303, 
 		4605510, 
 		4539717, 
 		4473924, 
 		4408131, 
 		4342338, 
 		4276545, 
 		4210752, 
 		4144959, 
 		4079166, 
 		4013373, 
 		3947580, 
 		3881787, 
 		3815994, 
 		3750201, 
 		3684408, 
 		3618615, 
 		3552822, 
 		3487029, 
 		3421236, 
 		3355443, 
 		3289650, 
 		3223857, 
 		3158064, 
 		3092271, 
 		3026478, 
 		2960685, 
 		2894892, 
 		2829099, 
 		2763306, 
 		2697513, 
 		2631720, 
 		2565927, 
 		2500134, 
 		2434341, 
 		2368548, 
 		2302755, 
 		2236962, 
 		2171169, 
 		2105376, 
 		2039583, 
 		1973790, 
 		1907997, 
 		1842204, 
 		1776411, 
 		1710618, 
 		1644825, 
 		1579032, 
 		1513239, 
 		1447446, 
 		1381653, 
 		1315860, 
 		1250067, 
 		1184274, 
 		1118481, 
 		1052688, 
 		986895, 
 		921102, 
 		855309, 
 		789516, 
 		723723, 
 		657930, 
 		592137, 
 		526344, 
 		460551, 
 		394758, 
 		328965, 
 		263172, 
 		197379, 
 		131586, 
 		65793, 
	};
	
	// The colors are obtained from the function Color.HSVToColor()
	static private final int[] colorPallette = {
		-5037277,
		-5036509,
		-5035997,
		-5035229,
		-5034717,
		-5034205,
		-5033437,
		-5032925,
		-5032157,
		-5031645,
		-5031133,
		-5030365,
		-5029853,
		-5029085,
		-5028573,
		-5028061,
		-5027293,
		-5026781,
		-5026013,
		-5025501,
		-5024989,
		-5024221,
		-5023709,
		-5022941,
		-5022429,
		-5021917,
		-5021149,
		-5020637,
		-5019869,
		-5019357,
		-5018845,
		-5018077,
		-5017565,
		-5016797,
		-5016285,
		-5015773,
		-5015005,
		-5014493,
		-5013725,
		-5013213,
		-5012701,
		-5011933,
		-5011421,
		-5010653,
		-5010141,
		-5009629,
		-5008861,
		-5008349,
		-5007581,
		-5007069,
		-5006557,
		-5005789,
		-5005277,
		-5004509,
		-5003997,
		-5003485,
		-5002717,
		-5002205,
		-5001437,
		-5000925,
		-5000413,
		-5131485,
		-5262557,
		-5459165,
		-5590237,
		-5721309,
		-5917917,
		-6048989,
		-6245597,
		-6376669,
		-6507741,
		-6704349,
		-6835421,
		-7032029,
		-7163101,
		-7359709,
		-7490781,
		-7621853,
		-7818461,
		-7949533,
		-8080605,
		-8277213,
		-8408285,
		-8604893,
		-8735965,
		-8867037,
		-9063645,
		-9194717,
		-9391325,
		-9522397,
		-9719005,
		-9850077,
		-9981149,
		-10177757,
		-10308829,
		-10439901,
		-10636509,
		-10767581,
		-10964189,
		-11095261,
		-11226333,
		-11422941,
		-11554013,
		-11750621,
		-11881693,
		-12078301,
		-12209373,
		-12340445,
		-12537053,
		-12668125,
		-12799197,
		-12995805,
		-13126877,
		-13323485,
		-13454557,
		-13585629,
		-13782237,
		-13913309,
		-14109917,
		-14240989,
		-14437597,
		-14437594,
		-14437592,
		-14437589,
		-14437587,
		-14437585,
		-14437582,
		-14437580,
		-14437577,
		-14437575,
		-14437573,
		-14437570,
		-14437568,
		-14437565,
		-14437563,
		-14437561,
		-14437558,
		-14437556,
		-14437553,
		-14437551,
		-14437549,
		-14437546,
		-14437544,
		-14437541,
		-14437539,
		-14437537,
		-14437534,
		-14437532,
		-14437529,
		-14437527,
		-14437525,
		-14437522,
		-14437520,
		-14437517,
		-14437515,
		-14437513,
		-14437510,
		-14437508,
		-14437505,
		-14437503,
		-14437501,
		-14437498,
		-14437496,
		-14437493,
		-14437491,
		-14437489,
		-14437486,
		-14437484,
		-14437481,
		-14437479,
		-14437477,
		-14437474,
		-14437472,
		-14437469,
		-14437467,
		-14437465,
		-14437462,
		-14437460,
		-14437457,
		-14437455,
		-14437453,
		-14437965,
		-14438477,
		-14439245,
		-14439757,
		-14440269,
		-14441037,
		-14441549,
		-14442317,
		-14442829,
		-14443341,
		-14444109,
		-14444621,
		-14445389,
		-14445901,
		-14446669,
		-14447181,
		-14447693,
		-14448461,
		-14448973,
		-14449485,
		-14450253,
		-14450765,
		-14451533,
		-14452045,
		-14452557,
		-14453325,
		-14453837,
		-14454605,
		-14455117,
		-14455885,
		-14456397,
		-14456909,
		-14457677,
		-14458189,
		-14458701,
		-14459469,
		-14459981,
		-14460749,
		-14461261,
		-14461773,
		-14462541,
		-14463053,
		-14463821,
		-14464333,
		-14465101,
		-14465613,
		-14466125,
		-14466893,
		-14467405,
		-14467917,
		-14468685,
		-14469197,
		-14469965,
		-14470477,
		-14470989,
		-14471757,
		-14472269,
		-14473037,
		-14473549,
		-14474317,
		-14277709,
		-14146637,
		-13950029,
		-13818957,
		-13687885,
		-13491277,
		-13360205,
		-13163597,
		-13032525,
		-12901453,
		-12704845,
		-12573773,
		-12377165,
		-12246093,
		-12115021,
		-11918413,
		-11787341,
		-11590733,
		-11459661,
		-11328589,
		-11131981,
		-11000909,
		-10804301,
		-10673229,
		-10542157,
		-10345549,
		-10214477,
		-10017869,
		-9886797,
		-9755725,
		-9559117,
		-9428045,
		-9231437,
		-9100365,
		-8969293,
		-8772685,
		-8641613,
		-8445005,
		-8313933,
		-8182861,
		-7986253,
		-7855181,
		-7658573,
		-7527501,
		-7396429,
		-7199821,
		-7068749,
		-6872141,
		-6741069,
		-6609997,
		-6413389,
		-6282317,
		-6085709,
		-5954637,
		-5823565,
		-5626957,
		-5495885,
		-5299277,
		-5168205,
		-5037133,
		-5037135,
		-5037137,
		-5037140,
		-5037142,
		-5037144,
		-5037147,
		-5037149,
		-5037152,
		-5037154,
		-5037156,
		-5037159,
		-5037161,
		-5037164,
		-5037166,
		-5037169,
		-5037171,
		-5037173,
		-5037176,
		-5037178,
		-5037180,
		-5037183,
		-5037185,
		-5037188,
		-5037190,
		-5037192,
		-5037195,
		-5037197,
		-5037200,
		-5037202,
		-5037205,
		-5037207,
		-5037209,
		-5037212,
		-5037214,
		-5037216,
		-5037219,
		-5037221,
		-5037224,
		-5037226,
		-5037228,
		-5037231,
		-5037233,
		-5037236,
		-5037238,
		-5037241,
		-5037243,
		-5037245,
		-5037248,
		-5037250,
		-5037252,
		-5037255,
		-5037257,
		-5037260,
		-5037262,
		-5037264,
		-5037267,
		-5037269,
		-5037272,
		-5037274,
	};

}
